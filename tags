!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddNemfood	server_function.cpp	/^void  AddNemfood(USE *use,int accfd)$/;"	f
Addfood	server_function.cpp	/^void  Addfood(USE *use,int accfd)$/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CC	lizhuo/Makefile	/^CC = gcc$/;"	m
CJSON_CDECL	lizhuo/cJSON.h	55;"	d
CJSON_CDECL	lizhuo/cJSON.h	71;"	d
CJSON_EXPORT_SYMBOLS	lizhuo/cJSON.h	60;"	d
CJSON_NESTING_LIMIT	lizhuo/cJSON.h	137;"	d
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)$/;"	f
CJSON_PUBLIC	lizhuo/cJSON.h	64;"	d
CJSON_PUBLIC	lizhuo/cJSON.h	66;"	d
CJSON_PUBLIC	lizhuo/cJSON.h	68;"	d
CJSON_PUBLIC	lizhuo/cJSON.h	75;"	d
CJSON_PUBLIC	lizhuo/cJSON.h	77;"	d
CJSON_STDCALL	lizhuo/cJSON.h	56;"	d
CJSON_STDCALL	lizhuo/cJSON.h	72;"	d
CJSON_VERSION_MAJOR	lizhuo/cJSON.h	82;"	d
CJSON_VERSION_MINOR	lizhuo/cJSON.h	83;"	d
CJSON_VERSION_PATCH	lizhuo/cJSON.h	84;"	d
ClearFood	server_function.cpp	/^void ClearFood(USE *use,int accfd)$/;"	f
Clear_Food	client_function.cpp	/^void Clear_Food(USE *use, HEAD *head,int accfd)$/;"	f
DEFAULT_THREAD_NUM	lizhuo/threadpool.c	13;"	d	file:
DEFAULT_THREAD_NUM	threadpool.c	13;"	d	file:
DEFAULT_TIME	lizhuo/threadpool.c	11;"	d	file:
DEFAULT_TIME	threadpool.c	11;"	d	file:
DT	function.h	/^}DT;$/;"	t	typeref:struct:__anon1
DT	lizhuo/hand.h	/^}DT;$/;"	t	typeref:struct:__anon7
FLAGS	Makefile	/^FLAGS = -g -c -Wall$/;"	m
FLAGS	lizhuo/Makefile	/^FLAGS = -g -c$/;"	m
GG	Makefile	/^GG = g++$/;"	m
GG	lizhuo/Makefile	/^GG = g++$/;"	m
HEAD	function.h	/^}HEAD;$/;"	t	typeref:struct:__anon2
Input_Foot	client_function.cpp	/^void Input_Foot(USE *use, HEAD *head,int accfd)$/;"	f
Input_Newfoot	client_function.cpp	/^void Input_Newfoot(USE *use, HEAD *head,int accfd)$/;"	f
Log_In_Find	server_function.cpp	/^void Log_In_Find(USE *use,int accfd)$/;"	f
MIN_WAIT_TASK_NUM	lizhuo/threadpool.c	12;"	d	file:
MIN_WAIT_TASK_NUM	threadpool.c	12;"	d	file:
NAN	lizhuo/cJSON.c	82;"	d	file:
NAN	lizhuo/cJSON.c	84;"	d	file:
OBJ	Makefile	/^OBJ =  client_function.o other_function.o client.o$/;"	m
OBJ	lizhuo/Makefile	/^OBJ = udp_connect_json.o cJSON.o$/;"	m
OBJS	Makefile	/^OBJS = server_function.o other_function.o server.o threadpool.o$/;"	m
OBJS	lizhuo/Makefile	/^OBJS = udp_server_json.o cJSON.o function.o threadpool.o$/;"	m
OP	function.h	/^}OP;$/;"	t	typeref:struct:__anon4
Outfood	server_function.cpp	/^void  Outfood(USE *use,int accfd)$/;"	f
Output_Foot	client_function.cpp	/^void Output_Foot(USE *use, HEAD *head,int accfd)$/;"	f
PassWd	lizhuo/hand.h	/^	int PassWd;$/;"	m	struct:regist
REGISTER	lizhuo/hand.h	/^}REGISTER;$/;"	t	typeref:struct:regist
Read	server_function.cpp	/^int Read(int sockfd)$/;"	f
Register	client_function.cpp	/^void Register(HEAD *p,int accfd)$/;"	f
RegisterFunc	lizhuo/function.cpp	/^void RegisterFunc(USE *ues ,DT *node)$/;"	f
RegisterFunc	other_function.cpp	/^void RegisterFunc(USE *use ,DT *node)$/;"	f
RunIMServer	lizhuo/function.cpp	/^void RunIMServer()$/;"	f
RunIMServer	other_function.cpp	/^void RunIMServer()$/;"	f
Sign_In	client_function.cpp	/^void Sign_In(HEAD *p,int accfd)$/;"	f
Slip	other_function.cpp	/^void Slip(char *p)$/;"	f
StopIMServer	lizhuo/function.cpp	/^void StopIMServer()$/;"	f
StopIMServer	other_function.cpp	/^void StopIMServer()$/;"	f
Time	other_function.cpp	/^char* Time()$/;"	f
USE	function.h	/^}USE;$/;"	t	typeref:struct:__anon3
UserAccound	lizhuo/hand.h	/^	char UserAccound[20];$/;"	m	struct:regist
Write	server_function.cpp	/^void Write(char *buf,int sockfd)$/;"	f
_CRT_SECURE_NO_DEPRECATE	lizhuo/cJSON.c	28;"	d	file:
_FUNCTION_H_	function.h	12;"	d
_HAND_H_	lizhuo/hand.h	10;"	d
_HEAD_H_	head.h	12;"	d
__THREADPOOL_H_	lizhuo/threadpool.h	2;"	d
__THREADPOOL_H_	threadpool.h	2;"	d
__WINDOWS__	lizhuo/cJSON.h	32;"	d
add_item_to_array	lizhuo/cJSON.c	/^static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)$/;"	f	file:
add_item_to_object	lizhuo/cJSON.c	/^static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)$/;"	f	file:
admin_thread	lizhuo/threadpool.c	/^admin_thread(void *threadpool)$/;"	f
admin_thread	threadpool.c	/^admin_thread(void *threadpool)$/;"	f
admin_tid	lizhuo/threadpool.c	/^   pthread_t admin_tid;                  \/* 管理者线程tid *\/$/;"	m	struct:threadpool_t	file:
admin_tid	threadpool.c	/^   pthread_t admin_tid;                  \/* 管理者线程tid *\/$/;"	m	struct:threadpool_t	file:
all_count	function.h	/^	int all_count; \/\/总量$/;"	m	struct:__anon3
allocate	lizhuo/cJSON.c	/^    void *(CJSON_CDECL *allocate)(size_t size);$/;"	m	struct:internal_hooks	file:
amount	function.h	/^	int  amount;$/;"	m	struct:__anon4
arg	lizhuo/threadpool.c	/^   void *arg;$/;"	m	struct:__anon6	file:
arg	threadpool.c	/^   void *arg;$/;"	m	struct:__anon5	file:
array	lizhuo/cJSON.h	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);$/;"	v
batch	function.h	/^	int batch;	\/\/批次$/;"	m	struct:__anon3
boolean	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);$/;"	v
buffer	lizhuo/cJSON.c	/^    unsigned char *buffer;$/;"	m	struct:__anon10	file:
buffer_at_offset	lizhuo/cJSON.c	302;"	d	file:
buffer_skip_whitespace	lizhuo/cJSON.c	/^static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)$/;"	f	file:
busy_thr_num	lizhuo/threadpool.c	/^   int busy_thr_num;                     \/* 忙线程，正在工作的线程 *\/$/;"	m	struct:threadpool_t	file:
busy_thr_num	threadpool.c	/^   int busy_thr_num;                     \/* 忙线程，正在工作的线程 *\/$/;"	m	struct:threadpool_t	file:
cJSON	lizhuo/cJSON.h	/^typedef struct cJSON$/;"	s
cJSON	lizhuo/cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddArrayToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddBoolToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)$/;"	f
cJSON_AddFalseToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNullToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddNumberToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)$/;"	f
cJSON_AddObjectToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_AddRawToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)$/;"	f
cJSON_AddStringToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)$/;"	f
cJSON_AddTrueToObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)$/;"	f
cJSON_Array	lizhuo/cJSON.h	95;"	d
cJSON_ArrayForEach	lizhuo/cJSON.h	290;"	d
cJSON_CreateArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)$/;"	f
cJSON_CreateArrayReference	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {$/;"	f
cJSON_CreateBool	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)$/;"	f
cJSON_CreateDoubleArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)$/;"	f
cJSON_CreateFalse	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)$/;"	f
cJSON_CreateFloatArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)$/;"	f
cJSON_CreateIntArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)$/;"	f
cJSON_CreateNull	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)$/;"	f
cJSON_CreateNumber	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)$/;"	f
cJSON_CreateObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)$/;"	f
cJSON_CreateObjectReference	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)$/;"	f
cJSON_CreateRaw	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)$/;"	f
cJSON_CreateString	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)$/;"	f
cJSON_CreateStringArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)$/;"	f
cJSON_CreateStringReference	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)$/;"	f
cJSON_CreateTrue	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)$/;"	f
cJSON_Delete	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)$/;"	f
cJSON_DeleteItemFromArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DeleteItemFromObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DeleteItemFromObjectCaseSensitive	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromArray	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)$/;"	f
cJSON_DetachItemFromObject	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemFromObjectCaseSensitive	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)$/;"	f
cJSON_DetachItemViaPointer	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)$/;"	f
cJSON_Duplicate	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)$/;"	f
cJSON_False	lizhuo/cJSON.h	90;"	d
cJSON_GetArrayItem	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)$/;"	f
cJSON_GetArraySize	lizhuo/cJSON.c	/^CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)$/;"	f
cJSON_GetErrorPtr	lizhuo/cJSON.c	/^CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)$/;"	f
cJSON_GetNumberValue	lizhuo/cJSON.c	/^CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item) $/;"	f
cJSON_GetObjectItem	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetObjectItemCaseSensitive	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)$/;"	f
cJSON_GetStringValue	lizhuo/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) $/;"	f
cJSON_Hooks	lizhuo/cJSON.h	/^typedef struct cJSON_Hooks$/;"	s
cJSON_Hooks	lizhuo/cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_Invalid	lizhuo/cJSON.h	89;"	d
cJSON_IsReference	lizhuo/cJSON.h	99;"	d
cJSON_Minify	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_Minify(char *json)$/;"	f
cJSON_NULL	lizhuo/cJSON.h	92;"	d
cJSON_New_Item	lizhuo/cJSON.c	/^static cJSON *cJSON_New_Item(const internal_hooks * const hooks)$/;"	f	file:
cJSON_Number	lizhuo/cJSON.h	93;"	d
cJSON_Object	lizhuo/cJSON.h	96;"	d
cJSON_Parse	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)$/;"	f
cJSON_ParseWithLength	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)$/;"	f
cJSON_ParseWithLengthOpts	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_ParseWithOpts	lizhuo/cJSON.c	/^CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)$/;"	f
cJSON_Print	lizhuo/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)$/;"	f
cJSON_PrintBuffered	lizhuo/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)$/;"	f
cJSON_PrintUnformatted	lizhuo/cJSON.c	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)$/;"	f
cJSON_Raw	lizhuo/cJSON.h	97;"	d
cJSON_SetBoolValue	lizhuo/cJSON.h	283;"	d
cJSON_SetIntValue	lizhuo/cJSON.h	275;"	d
cJSON_SetNumberHelper	lizhuo/cJSON.c	/^CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)$/;"	f
cJSON_SetNumberValue	lizhuo/cJSON.h	278;"	d
cJSON_SetValuestring	lizhuo/cJSON.c	/^CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)$/;"	f
cJSON_String	lizhuo/cJSON.h	94;"	d
cJSON_StringIsConst	lizhuo/cJSON.h	100;"	d
cJSON_True	lizhuo/cJSON.h	91;"	d
cJSON_Version	lizhuo/cJSON.c	/^CJSON_PUBLIC(const char*) cJSON_Version(void)$/;"	f
cJSON__h	lizhuo/cJSON.h	24;"	d
cJSON_bool	lizhuo/cJSON.h	/^typedef int cJSON_bool;$/;"	t
cJSON_free	lizhuo/cJSON.c	/^CJSON_PUBLIC(void) cJSON_free(void *object)$/;"	f
cJSON_malloc	lizhuo/cJSON.c	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size)$/;"	f
cJSON_strdup	lizhuo/cJSON.c	/^static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)$/;"	f	file:
can_access_at_index	lizhuo/cJSON.c	299;"	d	file:
can_read	lizhuo/cJSON.c	297;"	d	file:
cannot_access_at_index	lizhuo/cJSON.c	300;"	d	file:
case_insensitive_strcmp	lizhuo/cJSON.c	/^static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)$/;"	f	file:
cast_away_const	lizhuo/cJSON.c	/^static void* cast_away_const(const void* string)$/;"	f	file:
child	lizhuo/cJSON.h	/^    struct cJSON *child;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
child	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child);$/;"	v
child	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child);$/;"	v
cjson_min	lizhuo/cJSON.c	1185;"	d	file:
compare_double	lizhuo/cJSON.c	/^static cJSON_bool compare_double(double a, double b)$/;"	f	file:
content	lizhuo/cJSON.c	/^    const unsigned char *content;$/;"	m	struct:__anon9	file:
create_reference	lizhuo/cJSON.c	/^static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)$/;"	f	file:
data	function.h	/^	char data[BUFSIZ];$/;"	m	struct:__anon1
data	lizhuo/hand.h	/^	char data[BUFSIZ];$/;"	m	struct:__anon7
deallocate	lizhuo/cJSON.c	/^    void (CJSON_CDECL *deallocate)(void *pointer);$/;"	m	struct:internal_hooks	file:
depth	lizhuo/cJSON.c	/^    size_t depth; \/* How deeply nested (in arrays\/objects) is the input at the current offset. *\/$/;"	m	struct:__anon9	file:
depth	lizhuo/cJSON.c	/^    size_t depth; \/* current nesting depth (for formatted printing) *\/$/;"	m	struct:__anon10	file:
do_work	lizhuo/function.cpp	/^void* do_work(void* arg)$/;"	f
do_work	other_function.cpp	/^void* do_work(void* arg)$/;"	f
ensure	lizhuo/cJSON.c	/^static unsigned char* ensure(printbuffer * const p, size_t needed)$/;"	f	file:
error	lizhuo/cJSON.c	/^} error;$/;"	t	typeref:struct:__anon8	file:
expiration_day	function.h	/^	int expiration_day;	\/\/保质期$/;"	m	struct:__anon3
false	lizhuo/cJSON.c	68;"	d	file:
false	lizhuo/cJSON.c	70;"	d	file:
false	lizhuo/threadpool.c	15;"	d	file:
false	threadpool.c	15;"	d	file:
fd	function.h	/^	int fd;$/;"	m	struct:__anon1
fd	lizhuo/hand.h	/^	int fd;$/;"	m	struct:__anon7
format	lizhuo/cJSON.c	/^    cJSON_bool format; \/* is this print a formatted print *\/$/;"	m	struct:__anon10	file:
free_fn	lizhuo/cJSON.h	/^      void (CJSON_CDECL *free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
function	lizhuo/threadpool.c	/^   void *(*function)(void *);$/;"	m	struct:__anon6	file:
function	threadpool.c	/^   void *(*function)(void *);$/;"	m	struct:__anon5	file:
get_array_item	lizhuo/cJSON.c	/^static cJSON* get_array_item(const cJSON *array, size_t index)$/;"	f	file:
get_decimal_point	lizhuo/cJSON.c	/^static unsigned char get_decimal_point(void)$/;"	f	file:
get_object_item	lizhuo/cJSON.c	/^static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)$/;"	f	file:
global_error	lizhuo/cJSON.c	/^static error global_error = { NULL, 0 };$/;"	v	file:
global_hooks	lizhuo/cJSON.c	/^static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };$/;"	v	file:
hooks	lizhuo/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon10	file:
hooks	lizhuo/cJSON.c	/^    internal_hooks hooks;$/;"	m	struct:__anon9	file:
hooks	lizhuo/cJSON.h	/^CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);$/;"	v
id	lizhuo/hand.h	/^	int id;$/;"	m	struct:regist
initDB	lizhuo/function.cpp	/^void initDB()$/;"	f
initDB	other_function.cpp	/^void initDB()$/;"	f
internal_free	lizhuo/cJSON.c	/^static void CJSON_CDECL internal_free(void *pointer)$/;"	f	file:
internal_free	lizhuo/cJSON.c	179;"	d	file:
internal_hooks	lizhuo/cJSON.c	/^typedef struct internal_hooks$/;"	s	file:
internal_hooks	lizhuo/cJSON.c	/^} internal_hooks;$/;"	t	typeref:struct:internal_hooks	file:
internal_malloc	lizhuo/cJSON.c	/^static void * CJSON_CDECL internal_malloc(size_t size)$/;"	f	file:
internal_malloc	lizhuo/cJSON.c	178;"	d	file:
internal_realloc	lizhuo/cJSON.c	/^static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)$/;"	f	file:
internal_realloc	lizhuo/cJSON.c	180;"	d	file:
is_thread_alive	lizhuo/threadpool.c	/^is_thread_alive(pthread_t tid)$/;"	f
is_thread_alive	threadpool.c	/^is_thread_alive(pthread_t tid)$/;"	f
iserver	lizhuo/udp_server_json.cpp	/^int iserver = 0;$/;"	v
iserver	server.cpp	/^int iserver = 0;$/;"	v
isinf	lizhuo/cJSON.c	74;"	d	file:
isnan	lizhuo/cJSON.c	77;"	d	file:
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);$/;"	v
item	lizhuo/cJSON.h	/^CJSON_PUBLIC(void) cJSON_Delete(cJSON *item);$/;"	v
json	lizhuo/cJSON.c	/^    const unsigned char *json;$/;"	m	struct:__anon8	file:
length	lizhuo/cJSON.c	/^    size_t length;$/;"	m	struct:__anon10	file:
length	lizhuo/cJSON.c	/^    size_t length;$/;"	m	struct:__anon9	file:
live_thr_num	lizhuo/threadpool.c	/^   int live_thr_num;                     \/* 线程池中存活的线程数 *\/$/;"	m	struct:threadpool_t	file:
live_thr_num	threadpool.c	/^   int live_thr_num;                     \/* 线程池中存活的线程数 *\/$/;"	m	struct:threadpool_t	file:
lock	lizhuo/threadpool.c	/^   pthread_mutex_t lock;                 \/* 锁住整个结构体 *\/$/;"	m	struct:threadpool_t	file:
lock	threadpool.c	/^   pthread_mutex_t lock;                 \/* 锁住整个结构体 *\/$/;"	m	struct:threadpool_t	file:
main	client.cpp	/^int main()$/;"	f
main	lizhuo/udp_connect_json.cpp	/^int main(int argc,const char* argv[])$/;"	f
main	lizhuo/udp_server_json.cpp	/^int main(int argc,const char* argv[])$/;"	f
main	server.cpp	/^int main(int argc,const char* argv[])$/;"	f
malloc_fn	lizhuo/cJSON.h	/^      void *(CJSON_CDECL *malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
max_thr_num	lizhuo/threadpool.c	/^   int max_thr_num;                      \/* 线程池中最大线程数 *\/$/;"	m	struct:threadpool_t	file:
max_thr_num	threadpool.c	/^   int max_thr_num;                      \/* 线程池中最大线程数 *\/$/;"	m	struct:threadpool_t	file:
min_thr_num	lizhuo/threadpool.c	/^   int min_thr_num;                      \/* 线程池中最小线程数 *\/$/;"	m	struct:threadpool_t	file:
min_thr_num	threadpool.c	/^   int min_thr_num;                      \/* 线程池中最小线程数 *\/$/;"	m	struct:threadpool_t	file:
minify_string	lizhuo/cJSON.c	/^static void minify_string(char **input, char **output) {$/;"	f	file:
mysql	lizhuo/udp_server_json.cpp	/^MYSQL mysql;  $/;"	v
mysql	server.cpp	/^MYSQL mysql; $/;"	v
name	function.h	/^	char name[20];$/;"	m	struct:__anon4
name	function.h	/^	char name[30];$/;"	m	struct:__anon3
next	lizhuo/cJSON.h	/^    struct cJSON *next;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
noalloc	lizhuo/cJSON.c	/^    cJSON_bool noalloc;$/;"	m	struct:__anon10	file:
offset	lizhuo/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon10	file:
offset	lizhuo/cJSON.c	/^    size_t offset;$/;"	m	struct:__anon9	file:
parse_array	lizhuo/cJSON.c	/^static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_buffer	lizhuo/cJSON.c	/^} parse_buffer;$/;"	t	typeref:struct:__anon9	file:
parse_hex4	lizhuo/cJSON.c	/^static unsigned parse_hex4(const unsigned char * const input)$/;"	f	file:
parse_number	lizhuo/cJSON.c	/^static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_object	lizhuo/cJSON.c	/^static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_string	lizhuo/cJSON.c	/^static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
parse_value	lizhuo/cJSON.c	/^static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)$/;"	f	file:
password	function.h	/^	char password[30];$/;"	m	struct:__anon3
place	function.h	/^	int place;	\/\/位置$/;"	m	struct:__anon3
position	lizhuo/cJSON.c	/^    size_t position;$/;"	m	struct:__anon8	file:
prev	lizhuo/cJSON.h	/^    struct cJSON *prev;$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
print	lizhuo/cJSON.c	/^static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)$/;"	f	file:
print_array	lizhuo/cJSON.c	/^static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_number	lizhuo/cJSON.c	/^static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_object	lizhuo/cJSON.c	/^static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
print_string	lizhuo/cJSON.c	/^static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)$/;"	f	file:
print_string_ptr	lizhuo/cJSON.c	/^static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)$/;"	f	file:
print_value	lizhuo/cJSON.c	/^static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)$/;"	f	file:
printbuffer	lizhuo/cJSON.c	/^} printbuffer;$/;"	t	typeref:struct:__anon10	file:
purchase_time	function.h	/^	int purchase_time;\/\/进货时间$/;"	m	struct:__anon3
put_count	function.h	/^	int put_count;\/\/出货量$/;"	m	struct:__anon3
queue_front	lizhuo/threadpool.c	/^   int queue_front;                      \/* 队头 *\/$/;"	m	struct:threadpool_t	file:
queue_front	threadpool.c	/^   int queue_front;                      \/* 队头 *\/$/;"	m	struct:threadpool_t	file:
queue_max_size	lizhuo/threadpool.c	/^   int queue_max_size;                   \/* 队列能容纳的最大任务数 *\/$/;"	m	struct:threadpool_t	file:
queue_max_size	threadpool.c	/^   int queue_max_size;                   \/* 队列能容纳的最大任务数 *\/$/;"	m	struct:threadpool_t	file:
queue_not_empty	lizhuo/threadpool.c	/^   pthread_cond_t  queue_not_empty;      \/* 任务队列不为空 *\/$/;"	m	struct:threadpool_t	file:
queue_not_empty	threadpool.c	/^   pthread_cond_t  queue_not_empty;      \/* 任务队列不为空 *\/$/;"	m	struct:threadpool_t	file:
queue_not_full	lizhuo/threadpool.c	/^   pthread_cond_t  queue_not_full;       \/* 条件变量，任务队列不为满 *\/$/;"	m	struct:threadpool_t	file:
queue_not_full	threadpool.c	/^   pthread_cond_t  queue_not_full;       \/* 条件变量，任务队列不为满 *\/$/;"	m	struct:threadpool_t	file:
queue_rear	lizhuo/threadpool.c	/^   int queue_rear;                       \/* 队尾 *\/$/;"	m	struct:threadpool_t	file:
queue_rear	threadpool.c	/^   int queue_rear;                       \/* 队尾 *\/$/;"	m	struct:threadpool_t	file:
queue_size	lizhuo/threadpool.c	/^   int queue_size; $/;"	m	struct:threadpool_t	file:
queue_size	threadpool.c	/^   int queue_size; $/;"	m	struct:threadpool_t	file:
reallocate	lizhuo/cJSON.c	/^    void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);$/;"	m	struct:internal_hooks	file:
recv_work	lizhuo/function.cpp	/^void* recv_work(void* arg)$/;"	f
recv_work	other_function.cpp	/^void* recv_work(void* arg)$/;"	f
regist	lizhuo/hand.h	/^typedef struct regist$/;"	s
remain_count	function.h	/^	int remain_count;\/\/余量$/;"	m	struct:__anon3
replace_item_in_object	lizhuo/cJSON.c	/^static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)$/;"	f	file:
shipping_time	function.h	/^	int shipping_time;\/\/出货时间$/;"	m	struct:__anon3
shutdown	lizhuo/threadpool.c	/^   int shutdown;                         \/* true为关闭 *\/$/;"	m	struct:threadpool_t	file:
shutdown	threadpool.c	/^   int shutdown;                         \/* true为关闭 *\/$/;"	m	struct:threadpool_t	file:
size	lizhuo/cJSON.h	/^CJSON_PUBLIC(void *) cJSON_malloc(size_t size);$/;"	v
skip_multiline_comment	lizhuo/cJSON.c	/^static void skip_multiline_comment(char **input)$/;"	f	file:
skip_oneline_comment	lizhuo/cJSON.c	/^static void skip_oneline_comment(char **input)$/;"	f	file:
skip_utf8_bom	lizhuo/cJSON.c	/^static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)$/;"	f	file:
state	function.h	/^	char state[30];$/;"	m	struct:__anon4
static_strlen	lizhuo/cJSON.c	184;"	d	file:
string	lizhuo/cJSON.h	/^    char *string;$/;"	m	struct:cJSON
suffix_object	lizhuo/cJSON.c	/^static void suffix_object(cJSON *prev, cJSON *item)$/;"	f	file:
task_queue	lizhuo/threadpool.c	/^   threadpool_task_t *task_queue;        \/* 任务队列 *\/$/;"	m	struct:threadpool_t	file:
task_queue	threadpool.c	/^   threadpool_task_t *task_queue;        \/* 任务队列 *\/$/;"	m	struct:threadpool_t	file:
thread_counter	lizhuo/threadpool.c	/^   pthread_mutex_t thread_counter;       \/* 用于使用忙线程数时的锁 *\/$/;"	m	struct:threadpool_t	file:
thread_counter	threadpool.c	/^   pthread_mutex_t thread_counter;       \/* 用于使用忙线程数时的锁 *\/$/;"	m	struct:threadpool_t	file:
threadpool_add_task	lizhuo/threadpool.c	/^threadpool_add_task(threadpool_t *pool, void *(*function)(void *arg), void *arg)$/;"	f
threadpool_add_task	threadpool.c	/^threadpool_add_task(threadpool_t *pool, void *(*function)(void *arg), void *arg)$/;"	f
threadpool_create	lizhuo/threadpool.c	/^threadpool_create(int min_thr_num, int max_thr_num, int queue_max_size)$/;"	f
threadpool_create	threadpool.c	/^threadpool_create(int min_thr_num, int max_thr_num, int queue_max_size)$/;"	f
threadpool_destroy	lizhuo/threadpool.c	/^threadpool_destroy(threadpool_t *pool)$/;"	f
threadpool_destroy	threadpool.c	/^threadpool_destroy(threadpool_t *pool)$/;"	f
threadpool_free	lizhuo/threadpool.c	/^threadpool_free(threadpool_t *pool)$/;"	f
threadpool_free	threadpool.c	/^threadpool_free(threadpool_t *pool)$/;"	f
threadpool_t	lizhuo/threadpool.c	/^struct threadpool_t{$/;"	s	file:
threadpool_t	lizhuo/threadpool.h	/^typedef struct threadpool_t threadpool_t;$/;"	t	typeref:struct:threadpool_t
threadpool_t	threadpool.c	/^struct threadpool_t{$/;"	s	file:
threadpool_t	threadpool.h	/^typedef struct threadpool_t threadpool_t;$/;"	t	typeref:struct:threadpool_t
threadpool_task_t	lizhuo/threadpool.c	/^} threadpool_task_t;$/;"	t	typeref:struct:__anon6	file:
threadpool_task_t	threadpool.c	/^} threadpool_task_t;$/;"	t	typeref:struct:__anon5	file:
threadpool_thread	lizhuo/threadpool.c	/^threadpool_thread(void *threadpool)$/;"	f
threadpool_thread	threadpool.c	/^threadpool_thread(void *threadpool)$/;"	f
threads	lizhuo/threadpool.c	/^   pthread_t *threads;                   \/* 存放线程的tid,实际上就是管理了线 数组 *\/$/;"	m	struct:threadpool_t	file:
threads	threadpool.c	/^   pthread_t *threads;                   \/* 存放线程的tid,实际上就是管理了线 数组 *\/$/;"	m	struct:threadpool_t	file:
true	lizhuo/cJSON.c	63;"	d	file:
true	lizhuo/cJSON.c	65;"	d	file:
true	lizhuo/threadpool.c	14;"	d	file:
true	threadpool.c	14;"	d	file:
type	function.h	/^	char type[50];$/;"	m	struct:__anon4
type	function.h	/^	int type;	$/;"	m	struct:__anon2
type	lizhuo/cJSON.h	/^    int type;$/;"	m	struct:cJSON
update_offset	lizhuo/cJSON.c	/^static void update_offset(printbuffer * const buffer)$/;"	f	file:
username	function.h	/^	char username[30];$/;"	m	struct:__anon3
utf16_literal_to_utf8	lizhuo/cJSON.c	/^static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)$/;"	f	file:
valuedouble	lizhuo/cJSON.h	/^    double valuedouble;$/;"	m	struct:cJSON
valueint	lizhuo/cJSON.h	/^    int valueint;$/;"	m	struct:cJSON
valuestring	lizhuo/cJSON.h	/^    char *valuestring;$/;"	m	struct:cJSON
wait_exit_thr_num	lizhuo/threadpool.c	/^   int wait_exit_thr_num;                \/* 需要销毁的线程数 *\/$/;"	m	struct:threadpool_t	file:
wait_exit_thr_num	threadpool.c	/^   int wait_exit_thr_num;                \/* 需要销毁的线程数 *\/$/;"	m	struct:threadpool_t	file:
write_work	lizhuo/function.cpp	/^void* write_work(void* arg)$/;"	f
write_work	other_function.cpp	/^void* write_work(void* arg)$/;"	f

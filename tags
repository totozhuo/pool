!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AddNemfood	server_function.cpp	/^void  AddNemfood(USE *use,int accfd)$/;"	f
Addfood	server_function.cpp	/^void  Addfood(USE *use,int accfd)$/;"	f
Addfoodnor	server_function.cpp	/^void  Addfoodnor(USE *use,int accfd)$/;"	f
Allot_food	client_function.cpp	/^void Allot_food(USE *use, HEAD *head,int accfd)$/;"	f
Allotfood	server_function.cpp	/^void  Allotfood(USE *use,int accfd)$/;"	f
CC	Makefile	/^CC = gcc$/;"	m
ClearFood	server_function.cpp	/^void ClearFood(USE *use,int accfd)$/;"	f
Clear_Food	client_function.cpp	/^void Clear_Food(USE *use, HEAD *head,int accfd)$/;"	f
DEFAULT_THREAD_NUM	threadpool.c	13;"	d	file:
DEFAULT_TIME	threadpool.c	11;"	d	file:
DT	function.h	/^}DT;$/;"	t	typeref:struct:__anon1
FLAGS	Makefile	/^FLAGS = -g -c$/;"	m
Find_Food	client_function.cpp	/^void Find_Food(USE *use, HEAD *head,int accfd)$/;"	f
Findfood	server_function.cpp	/^void  Findfood(USE *use,int accfd)$/;"	f
GG	Makefile	/^GG = g++$/;"	m
Get_remarn	server_function.cpp	/^int Get_remarn(USE *use)$/;"	f
HEAD	function.h	/^}HEAD;$/;"	t	typeref:struct:__anon2
Input_Foot	client_function.cpp	/^void Input_Foot(USE *use, HEAD *head,int accfd)$/;"	f
Input_Newfoot	client_function.cpp	/^void Input_Newfoot(USE *use, HEAD *head,int accfd)$/;"	f
Log_In_Find	server_function.cpp	/^void Log_In_Find(USE *use,int accfd)$/;"	f
MIN_WAIT_TASK_NUM	threadpool.c	12;"	d	file:
OB	Makefile	/^OB =  client_function.o other_function.o staff_client.o server_function.o$/;"	m
OBJ	Makefile	/^OBJ =  client_function.o other_function.o client.o server_function.o$/;"	m
OBJS	Makefile	/^OBJS = server_function.o other_function.o server.o threadpool.o$/;"	m
OP	function.h	/^}OP;$/;"	t	typeref:struct:__anon5
Oper	server_function.cpp	/^void Oper()$/;"	f
Outfood	server_function.cpp	/^int  Outfood(USE *use,int accfd)$/;"	f
Outfoodnor	server_function.cpp	/^int  Outfoodnor(USE *use,int accfd)$/;"	f
Output_Foot	client_function.cpp	/^void Output_Foot(USE *use, HEAD *head,int accfd)$/;"	f
Rd	client_function.cpp	/^void * Rd(void*arg)$/;"	f
Read	server_function.cpp	/^int Read(int sockfd)$/;"	f
Read_find	client_function.cpp	/^void Read_find(int sockfd)$/;"	f
Register	client_function.cpp	/^void Register(HEAD *p,int accfd)$/;"	f
RegisterFunc	other_function.cpp	/^void RegisterFunc(USE *use ,DT *node)$/;"	f
RunIMServer	other_function.cpp	/^void RunIMServer()$/;"	f
Sign_In	client_function.cpp	/^void Sign_In(HEAD *p,int accfd)$/;"	f
Slip	other_function.cpp	/^void Slip(char *p)$/;"	f
SmartInfood	server_function.cpp	/^void  SmartInfood(USE *use,int accfd)$/;"	f
Smart_Infood	client_function.cpp	/^void Smart_Infood(USE *use, HEAD *head,int accfd)$/;"	f
StopIMServer	other_function.cpp	/^void StopIMServer()$/;"	f
TIME	function.h	/^}TIME;$/;"	t	typeref:struct:__anon4
Time	other_function.cpp	/^char* Time()$/;"	f
USE	function.h	/^}USE;$/;"	t	typeref:struct:__anon3
Write	server_function.cpp	/^void Write(char *buf,int sockfd)$/;"	f
_FUNCTION_H_	function.h	12;"	d
_HEAD_H_	head.h	12;"	d
__THREADPOOL_H_	threadpool.h	2;"	d
_custom	pthread_srand.c	/^void * _custom(void*arg)$/;"	f
_puduct	pthread_srand.c	/^void* _puduct(void*arg)$/;"	f
admin_thread	threadpool.c	/^admin_thread(void *threadpool)$/;"	f
admin_tid	threadpool.c	/^   pthread_t admin_tid;                  \/* 管理者线程tid *\/$/;"	m	struct:threadpool_t	file:
all_count	function.h	/^	int all_count; \/\/总量$/;"	m	struct:__anon3
all_count	function.h	/^	int all_count;$/;"	m	struct:__anon4
arg	threadpool.c	/^   void *arg;$/;"	m	struct:__anon6	file:
batch	function.h	/^	int batch;	\/\/批次$/;"	m	struct:__anon3
busy_thr_num	threadpool.c	/^   int busy_thr_num;                     \/* 忙线程，正在工作的线程 *\/$/;"	m	struct:threadpool_t	file:
check_handler	other_function.cpp	/^void* check_handler(void* arg)$/;"	f
cost	pthread_srand.c	/^sem_t cost,product;$/;"	v
count	other_function.cpp	/^int count = 0;$/;"	v
data	function.h	/^	char data[BUFSIZ];$/;"	m	struct:__anon1
do_work	other_function.cpp	/^void* do_work(void* arg)$/;"	f
expiration_day	function.h	/^	int expiration_day;	\/\/保质期$/;"	m	struct:__anon3
false	threadpool.c	15;"	d	file:
fd	function.h	/^	int fd;$/;"	m	struct:__anon1
fd	function.h	/^	int fd;$/;"	m	struct:__anon4
function	threadpool.c	/^   void *(*function)(void *);$/;"	m	struct:__anon6	file:
heart_check	other_function.cpp	/^void* heart_check(void* arg)$/;"	f
heart_work	client_function.cpp	/^void* heart_work(void* arg)$/;"	f
initDB	other_function.cpp	/^void initDB()$/;"	f
is_thread_alive	threadpool.c	/^is_thread_alive(pthread_t tid)$/;"	f
iserver	client.cpp	/^int iserver;$/;"	v
iserver	server.cpp	/^int iserver = 0;$/;"	v
iserver	staff_client.cpp	/^int iserver;$/;"	v
listen_work	other_function.cpp	/^void* listen_work(void* arge)$/;"	f
live_thr_num	threadpool.c	/^   int live_thr_num;                     \/* 线程池中存活的线程数 *\/$/;"	m	struct:threadpool_t	file:
lock	threadpool.c	/^   pthread_mutex_t lock;                 \/* 锁住整个结构体 *\/$/;"	m	struct:threadpool_t	file:
main	client.cpp	/^int main()$/;"	f
main	pthread_srand.c	/^int main(int argc,const char* argv[])$/;"	f
main	server.cpp	/^int main(int argc,const char* argv[])$/;"	f
main	staff_client.cpp	/^int main()$/;"	f
max_thr_num	threadpool.c	/^   int max_thr_num;                      \/* 线程池中最大线程数 *\/$/;"	m	struct:threadpool_t	file:
min_thr_num	threadpool.c	/^   int min_thr_num;                      \/* 线程池中最小线程数 *\/$/;"	m	struct:threadpool_t	file:
mysql	client.cpp	/^MYSQL mysql;  $/;"	v
mysql	server.cpp	/^MYSQL mysql; $/;"	v
mysql	staff_client.cpp	/^MYSQL mysql;  $/;"	v
name	function.h	/^	char name[20];$/;"	m	struct:__anon5
name	function.h	/^	char name[30];$/;"	m	struct:__anon3
name	function.h	/^	char name[30];$/;"	m	struct:__anon4
op	server_function.cpp	/^OP op={0};$/;"	v
password	function.h	/^	char password[30];$/;"	m	struct:__anon3
place	function.h	/^	int place;	\/\/位置$/;"	m	struct:__anon3
product	pthread_srand.c	/^sem_t cost,product;$/;"	v
purchase_time	function.h	/^	int purchase_time;\/\/进货时间$/;"	m	struct:__anon3
put_count	function.h	/^	int put_count;\/\/出货量$/;"	m	struct:__anon3
quen	pthread_srand.c	/^int quen[5] = {0};$/;"	v
queue_front	threadpool.c	/^   int queue_front;                      \/* 队头 *\/$/;"	m	struct:threadpool_t	file:
queue_max_size	threadpool.c	/^   int queue_max_size;                   \/* 队列能容纳的最大任务数 *\/$/;"	m	struct:threadpool_t	file:
queue_not_empty	threadpool.c	/^   pthread_cond_t  queue_not_empty;      \/* 任务队列不为空 *\/$/;"	m	struct:threadpool_t	file:
queue_not_full	threadpool.c	/^   pthread_cond_t  queue_not_full;       \/* 条件变量，任务队列不为满 *\/$/;"	m	struct:threadpool_t	file:
queue_rear	threadpool.c	/^   int queue_rear;                       \/* 队尾 *\/$/;"	m	struct:threadpool_t	file:
queue_size	threadpool.c	/^   int queue_size; $/;"	m	struct:threadpool_t	file:
recv_work	other_function.cpp	/^void* recv_work(void* arg)$/;"	f
remain_count	function.h	/^	int remain_count;\/\/余量$/;"	m	struct:__anon3
shipping_time	function.h	/^	int shipping_time;\/\/出货时间$/;"	m	struct:__anon3
shutdown	threadpool.c	/^   int shutdown;                         \/* true为关闭 *\/$/;"	m	struct:threadpool_t	file:
task_queue	threadpool.c	/^   threadpool_task_t *task_queue;        \/* 任务队列 *\/$/;"	m	struct:threadpool_t	file:
thread_counter	threadpool.c	/^   pthread_mutex_t thread_counter;       \/* 用于使用忙线程数时的锁 *\/$/;"	m	struct:threadpool_t	file:
threadpool_add_task	threadpool.c	/^threadpool_add_task(threadpool_t *pool, void *(*function)(void *arg), void *arg)$/;"	f
threadpool_create	threadpool.c	/^threadpool_create(int min_thr_num, int max_thr_num, int queue_max_size)$/;"	f
threadpool_destroy	threadpool.c	/^threadpool_destroy(threadpool_t *pool)$/;"	f
threadpool_free	threadpool.c	/^threadpool_free(threadpool_t *pool)$/;"	f
threadpool_t	threadpool.c	/^struct threadpool_t{$/;"	s	file:
threadpool_t	threadpool.h	/^typedef struct threadpool_t threadpool_t;$/;"	t	typeref:struct:threadpool_t
threadpool_task_t	threadpool.c	/^} threadpool_task_t;$/;"	t	typeref:struct:__anon6	file:
threadpool_thread	threadpool.c	/^threadpool_thread(void *threadpool)$/;"	f
threads	threadpool.c	/^   pthread_t *threads;                   \/* 存放线程的tid,实际上就是管理了线 数组 *\/$/;"	m	struct:threadpool_t	file:
time	function.h	/^	int time;$/;"	m	struct:__anon4
true	threadpool.c	14;"	d	file:
type	function.h	/^	char type[520];$/;"	m	struct:__anon5
type	function.h	/^	int type;	$/;"	m	struct:__anon2
username	function.h	/^	char username[30];$/;"	m	struct:__anon3
wait_exit_thr_num	threadpool.c	/^   int wait_exit_thr_num;                \/* 需要销毁的线程数 *\/$/;"	m	struct:threadpool_t	file:
write_work	other_function.cpp	/^void* write_work(void* arg)$/;"	f
